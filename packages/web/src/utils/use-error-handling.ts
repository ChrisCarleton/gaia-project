import { Action, Mutation, useStore } from '@/store';
import { GaiaProjectState } from '@/store/state';
import { ErrorResponse, ErrorResponseSchema } from '@gaia-project/api';
import { ResponseError } from 'superagent';
import { useRouter } from 'vue-router';
import { Router } from 'vue-router';
import { Store } from 'vuex';

/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
function isResponseError(error: any): error is ResponseError {
  return (
    (typeof error.status === 'number' && error.response) ||
    typeof error.timeout === 'boolean'
  );
}

type StatusCodeHandler = (
  error: ErrorResponse,
  store: Store<GaiaProjectState>,
  router: Router,
) => void | Promise<void>;
export type StatusCodeHandlers = Record<number, StatusCodeHandler>;

const DefaultStatusCodeHandlers: StatusCodeHandlers = {
  // Unauthorized error. Most likely cause is the user's session expired.
  401: (error, store) => {
    store.commit(Mutation.SignOutUser);
  },

  403: async (error, store): Promise<void> => {
    await store.dispatch(
      Action.ToastError,
      `You do not have permission to perform the requested action: ${error.message}`,
    );
  },

  // Not found error.
  404: async (error, store, router) => {
    await router.push('/notFound');
  },

  // Server error.
  500: async (error, store): Promise<void> => {
    console.error(error);
    await store.dispatch(
      Action.ToastError,
      'An unexpected server error has occurred.',
    );
  },
};

async function handleError(
  store: Store<GaiaProjectState>,
  router: Router,
  error: unknown,
  handlers: StatusCodeHandlers,
): Promise<void> {
  // Is the error generated by Superagent?
  if (isResponseError(error)) {
    // Was the error caused by a request timeout?
    if (error.timeout) {
      await store.dispatch(
        Action.ToastError,
        'Request to server timed out. Please try again later.',
      );
      return;
    }

    // Otherwise, parse the response body for the actual error details.
    const parsed = ErrorResponseSchema.safeParse(error.response?.body);
    if (parsed.success) {
      if (handlers[parsed.data.status]) {
        try {
          await handlers[parsed.data.status](parsed.data, store, router);
        } catch (error) {
          console.error(error);
          await store.dispatch(
            Action.ToastError,
            'An HTTP response handler has thrown an unexpected exception.',
          );
        }
        return;
      }
    }
  }

  // Generic response for all unhandled cases.
  console.error(error);
  await store.dispatch(
    Action.ToastError,
    'An unexpected error has occurred. Please try again later.',
  );
}

export type ErrorHandler = (
  error: unknown,
  statusCodeHandlers?: StatusCodeHandler,
) => Promise<void>;

export function useErrorHandling(): ErrorHandler {
  const store = useStore();
  const router = useRouter();

  return (error, statusCodeHandlers?) =>
    handleError(store, router, error, {
      ...DefaultStatusCodeHandlers,
      ...statusCodeHandlers,
    });
}
