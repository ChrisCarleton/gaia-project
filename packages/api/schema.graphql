"Represents a date and time. Serializes to an ISO string."
scalar Date

"An enumeration representing the faction that a player is playing as."
enum FactionType {
  Ambas
  BalTaks
  Bescods
  Firaks
  Geodens
  Gleens
  HadschHallas
  Itars
  Ivits
  Nevlas
  Lantids
  Taklons
  Terrans
  Xenos
}

"Represents a user in the system."
type UserDTO {
  "The user's globally-unique ID."
  id: ID!

  "A JWT that the user can use to make secure API calls and connect to lobbies."
  authToken: String

  "A URL to the user's avatar."
  avatar: String

  "The display name to show to represent the user in the UI."
  displayName: String!

  "The user's email address."
  email: String

  "The date and time at which the user's account was first created."
  memberSince: Date!
}

"Represents the currently logged in user."
type CurrentUserDTO {
  "Indicates whether or not the current user is browsing anonymously (not logged in)."
  anonymous: Boolean!

  "If the user is logged in, this will represent the current user."
  user: UserDTO

  "If the user is logged in, this will be the JWT the user can be used to call APIs."
  authToken: String
}

"Represents a player in a game lobby."
type LobbyPlayerDTO {
  "The player's user profile."
  user: UserDTO!

  "The player's selected faction."
  faction: FactionType
}

"Represents a game lobby where players can join a game before it begins."
type LobbyDTO {
  "The lobby's globally-unique identifier."
  id: ID!

  "Date and time on which this lobby was first created."
  createdOn: Date!

  "The user who created the lobby. (They will be the lobby admins.)"
  owner: UserDTO!

  "The players who are currently in the lobby."
  players: [LobbyPlayerDTO!]!
}

input ProfileUpdateDTO {
  "The user's new avatar URL. Omit to leave unchanged."
  avatar: String

  "The user's new display name. Omit to leave unchanged."
  displayName: String
}

type Query {
  "Attempts to get a lobby by its ID. Will return null if lobby is not found."
  lobbiesGetLobby(id: ID!): LobbyDTO

  "Gets the currently logged in user."
  usersGetCurrent: CurrentUserDTO!
}

type Mutation {
  "Creates a new lobby and returns the DTO."
  lobbiesCreateLobby: LobbyDTO!

  "Requests that the current user's email address be changed."
  usersChangeEmail(newEmail: String!): Boolean!

  "Updates a user's profile info."
  usersUpdateProfile(update: ProfileUpdateDTO!): UserDTO!
}

type Subscription {
  lobbiesJoin(lobbyId: ID!): LobbyDTO!
}
